type ChatMessage {
  user: String!
  body: String!
  createdAt: AWSDateTime
  chatRoomId: String!
  id: ID!
  updatedAt: AWSDateTime!
}

type EventChatRoom {
  eventId: Int!
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelChatMessageConnection {
  items: [ChatMessage]!
  nextToken: String
}

input ModelChatMessageFilterInput {
  user: ModelStringInput
  body: ModelStringInput
  createdAt: ModelStringInput
  chatRoomId: ModelStringInput
  and: [ModelChatMessageFilterInput]
  or: [ModelChatMessageFilterInput]
  not: ModelChatMessageFilterInput
}

type Query {
  getChatMessage(id: ID!): ChatMessage
  listChatMessages(filter: ModelChatMessageFilterInput, limit: Int, nextToken: String): ModelChatMessageConnection
  getEventChatRoom(id: ID!): EventChatRoom
  listEventChatRooms(filter: ModelEventChatRoomFilterInput, limit: Int, nextToken: String): ModelEventChatRoomConnection
  listChatMessagesByChatRoomIdAndCreatedAt(chatRoomId: String!, createdAt: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelChatMessageFilterInput, limit: Int, nextToken: String): ModelChatMessageConnection
}

input ModelChatMessageConditionInput {
  user: ModelStringInput
  body: ModelStringInput
  createdAt: ModelStringInput
  chatRoomId: ModelStringInput
  and: [ModelChatMessageConditionInput]
  or: [ModelChatMessageConditionInput]
  not: ModelChatMessageConditionInput
}

input CreateChatMessageInput {
  user: String!
  body: String!
  createdAt: AWSDateTime
  chatRoomId: String!
  id: ID
}

input UpdateChatMessageInput {
  user: String
  body: String
  createdAt: AWSDateTime
  chatRoomId: String
  id: ID!
}

input DeleteChatMessageInput {
  id: ID!
}

type Mutation {
  createChatMessage(input: CreateChatMessageInput!, condition: ModelChatMessageConditionInput): ChatMessage
  updateChatMessage(input: UpdateChatMessageInput!, condition: ModelChatMessageConditionInput): ChatMessage
  deleteChatMessage(input: DeleteChatMessageInput!, condition: ModelChatMessageConditionInput): ChatMessage
  createEventChatRoom(input: CreateEventChatRoomInput!, condition: ModelEventChatRoomConditionInput): EventChatRoom
  updateEventChatRoom(input: UpdateEventChatRoomInput!, condition: ModelEventChatRoomConditionInput): EventChatRoom
  deleteEventChatRoom(input: DeleteEventChatRoomInput!, condition: ModelEventChatRoomConditionInput): EventChatRoom
}

input ModelSubscriptionChatMessageFilterInput {
  user: ModelSubscriptionStringInput
  body: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  chatRoomId: ModelSubscriptionStringInput
  and: [ModelSubscriptionChatMessageFilterInput]
  or: [ModelSubscriptionChatMessageFilterInput]
}

type Subscription {
  onCreateChatMessage(filter: ModelSubscriptionChatMessageFilterInput): ChatMessage @aws_subscribe(mutations: ["createChatMessage"])
  onUpdateChatMessage(filter: ModelSubscriptionChatMessageFilterInput): ChatMessage @aws_subscribe(mutations: ["updateChatMessage"])
  onDeleteChatMessage(filter: ModelSubscriptionChatMessageFilterInput): ChatMessage @aws_subscribe(mutations: ["deleteChatMessage"])
  onCreateEventChatRoom(filter: ModelSubscriptionEventChatRoomFilterInput): EventChatRoom @aws_subscribe(mutations: ["createEventChatRoom"])
  onUpdateEventChatRoom(filter: ModelSubscriptionEventChatRoomFilterInput): EventChatRoom @aws_subscribe(mutations: ["updateEventChatRoom"])
  onDeleteEventChatRoom(filter: ModelSubscriptionEventChatRoomFilterInput): EventChatRoom @aws_subscribe(mutations: ["deleteEventChatRoom"])
}

type ModelEventChatRoomConnection {
  items: [EventChatRoom]!
  nextToken: String
}

input ModelEventChatRoomFilterInput {
  eventId: ModelIntInput
  and: [ModelEventChatRoomFilterInput]
  or: [ModelEventChatRoomFilterInput]
  not: ModelEventChatRoomFilterInput
}

input ModelEventChatRoomConditionInput {
  eventId: ModelIntInput
  and: [ModelEventChatRoomConditionInput]
  or: [ModelEventChatRoomConditionInput]
  not: ModelEventChatRoomConditionInput
}

input CreateEventChatRoomInput {
  eventId: Int!
  id: ID
}

input UpdateEventChatRoomInput {
  eventId: Int
  id: ID!
}

input DeleteEventChatRoomInput {
  id: ID!
}

input ModelSubscriptionEventChatRoomFilterInput {
  eventId: ModelSubscriptionIntInput
  and: [ModelSubscriptionEventChatRoomFilterInput]
  or: [ModelSubscriptionEventChatRoomFilterInput]
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}
